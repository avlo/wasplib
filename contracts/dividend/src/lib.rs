// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use dividend::*;
use schema::*;
use wasmlib::*;

mod dividend;
mod schema;
mod types;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_call(FUNC_DIVIDE, func_divide_thunk);
    exports.add_call(FUNC_MEMBER, func_member_thunk);
}

//@formatter:off
pub struct FuncDivideParams {
}
//@formatter:on

fn func_divide_thunk(ctx: &ScCallContext) {
    let params = FuncDivideParams {};
    func_divide(ctx, &params);
}

//@formatter:off
pub struct FuncMemberParams {
    pub address: ScImmutableAddress, // address of dividend recipient
    pub factor:  ScImmutableInt,     // relative division factor
}
//@formatter:on

fn func_member_thunk(ctx: &ScCallContext) {
    // only creator can add members
    if !ctx.from(&ctx.contract_creator()) {
        ctx.panic("no permission");
    }

    let p = ctx.params();
    let params = FuncMemberParams {
        address: p.get_address(PARAM_ADDRESS),
        factor: p.get_int(PARAM_FACTOR),
    };
    ctx.require(params.address.exists(), "missing mandatory address");
    ctx.require(params.factor.exists(), "missing mandatory factor");
    func_member(ctx, &params);
}
