// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
//////// DO NOT CHANGE THIS FILE! ////////
// Change the json schema instead

use aaa::*;
use schema::*;
use wasmlib::*;

mod aaa;
mod schema;
mod types;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_call(FUNC_DONATE, func_donate_thunk);
    exports.add_call(FUNC_WITHDRAW, func_withdraw_thunk);
    exports.add_view(VIEW_DONATIONS, view_donations_thunk);
}

//@formatter:off
pub struct FuncDonateParams {
    pub feedback: ScImmutableString, // feedback for the person you donate to
}
//@formatter:on

fn func_donate_thunk(ctx: &ScCallContext) {
    // only the super spy can donate
    let grantee = ctx.state().get_agent_id("superspy");
    if !grantee.exists() {
        ctx.panic("grantee not set: superspy");
    }
    if !ctx.from(&grantee.value()) {
        ctx.panic("no permission");
    }

    let p = ctx.params();
    let params = FuncDonateParams {
        feedback: p.get_string(PARAM_FEEDBACK),
    };
    func_donate(ctx, &params);
}

//@formatter:off
pub struct FuncWithdrawParams {
    pub amount: ScImmutableInt, // amount to withdraw
}
//@formatter:on

fn func_withdraw_thunk(ctx: &ScCallContext) {
    // only SC creator can withdraw donated funds
    if !ctx.from(&ctx.contract_creator()) {
        ctx.panic("no permission");
    }

    let p = ctx.params();
    let params = FuncWithdrawParams {
        amount: p.get_int(PARAM_AMOUNT),
    };
    func_withdraw(ctx, &params);
}

//@formatter:off
pub struct ViewDonationsParams {
}
//@formatter:on

fn view_donations_thunk(ctx: &ScViewContext) {
    let params = ViewDonationsParams {};
    view_donations(ctx, &params);
}
